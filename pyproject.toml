[tool.poetry]
name = "ultrasound-fetal-images"
version = "0.1.0"
description = ""
authors = ["Aleksander Zamojski <zamojski96@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "3.10.*"
# --------- pytorch --------- #
torch = "2.2.0"
torchvision = "^0.17.0"
lightning = "^2.1.4"
torchmetrics = "^1.3.0"
# --------- missing pytorch nvidia --------- # https://download.pytorch.org/whl/nightly/cu121
nvidia-cublas-cu12 = "12.1.3.1"
nvidia-cuda-cupti-cu12 = "12.1.105"
nvidia-cuda-nvrtc-cu12 = "12.1.105"
nvidia-cuda-runtime-cu12 = "12.1.105"
nvidia-cudnn-cu12 = "8.9.2.26"
nvidia-cufft-cu12 = "11.0.2.54"
nvidia-curand-cu12 = "10.3.2.106"
nvidia-cusolver-cu12 = "11.4.5.107"
nvidia-cusparse-cu12 = "12.1.0.106"
nvidia-nccl-cu12 = "2.19.3"
nvidia-nvjitlink-cu12 = "12.1.105"
nvidia-nvtx-cu12 = "12.1.105"
# --------- hydra --------- #
hydra-core = "1.3.2"
hydra-colorlog = "^1.2.0"
hydra-optuna-sweeper = "^1.2.0"
# --------- data --------- #
pandas = "^2.2.0"
numpy = "^1.26.3"
scipy = "^1.12.0"
scikit-learn = "^1.4.0"
jupyter = "^1.0.0"
matplotlib = "^3.8.2"
plotly = "^5.18.0"
scikit-image = "^0.22.0"
albumentations = "^1.3.1"
# --------- loggers --------- #
# tensorboard = "^2.12.0"
wandb = "^0.16.2"
# neptune-client
# mlflow
# comet-ml
# --------- others --------- #
rootutils = "^1.0.7"       # standardizing the project root setup
pre-commit = "^3.6.0"      # hooks for applying linters on commit
rich = "^13.7.0"           # beautiful text formatting in terminal
pytest = "^7.4.4"          # tests
pytest-cov = "^4.1.0"
sh = { version = "^1.14.3", markers = "sys_platform == 'linux' or sys_platform == 'darwin'" }
gdown = "^5.1.0"
fastapi = "^0.109.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = [
    "--color=yes",
    "--durations=0",
    "--strict-markers",
    "--doctest-modules",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]
log_cli = "True"
markers = [
    "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if __name__ == .__main__.:",
]
